http://code.google.com/p/inferno-os/issues/detail?id=244
--- emu/port/devsrv.c.orig	2010-12-11 15:21:22.000000000 +0200
+++ emu/port/devsrv.c	2010-12-11 15:20:15.000000000 +0200
@@ -42,7 +42,27 @@
 	SrvFile*	devices;
 };
 
+typedef struct SrvPendChan SrvPendChan;
+struct SrvPendChan {
+	Channel*	pendchan;
+	SrvPendChan*	next;
+};
+
+typedef struct SrvChan SrvChan;
+struct SrvChan {
+	Channel*	chan;
+	SrvPendChan*	pendlist;
+	SrvChan*	next;
+};
+
+typedef struct SrvPend SrvPend;
+struct SrvPend {
+	QLock		l;
+	SrvChan*	chanlist;
+};
+
 static SrvDev dev;
+static SrvPend pend;
 
 void	freechan(Heap*, int);
 static void	freerdchan(Heap*, int);
@@ -51,6 +71,102 @@
 Type	*Trdchan;
 Type	*Twrchan;
 
+static void
+pendaddpend(Channel *chan, Channel *pendchan)
+{
+	SrvChan *sc;
+	SrvPendChan *pc;
+
+	pc = malloc(sizeof(SrvPendChan));
+	if(pc == nil)
+		error(Enomem);
+	qlock(&pend.l);
+	for(sc = pend.chanlist; sc != nil; sc = sc->next)
+		if(sc->chan == chan)
+			break;
+	if(sc == nil){
+		qunlock(&pend.l);
+		free(pc);
+		error(Enonexist);
+	}
+	pc->pendchan = pendchan;
+	pc->next = sc->pendlist;
+	sc->pendlist = pc;
+	qunlock(&pend.l);
+}
+
+static void
+penddelpend(Channel *chan, Channel *pendchan)
+{
+	SrvChan *sc;
+	SrvPendChan *pc, **l;
+
+	qlock(&pend.l);
+	for(sc = pend.chanlist; sc != nil; sc = sc->next)
+		if(sc->chan == chan)
+			break;
+	if(sc == nil){
+		qunlock(&pend.l);
+		return;
+	}
+	for(l = &sc->pendlist; *l != nil; l = &(*l)->next)
+		if((*l)->pendchan == pendchan)
+			break;
+	pc = *l;
+	if(pc == nil){
+		qunlock(&pend.l);
+		error(Egreg);
+	}
+	*l = pc->next;
+	qunlock(&pend.l);
+	free(pc);
+}
+
+static void
+pendaddchan(Channel *chan)
+{
+	SrvChan *sc;
+
+	sc = malloc(sizeof(SrvChan));
+	if(sc == nil)
+		error(Enomem);
+	qlock(&pend.l);
+	sc->chan = chan;
+	sc->pendlist = nil;
+	sc->next = pend.chanlist;
+	pend.chanlist = sc;
+	qunlock(&pend.l);
+}
+
+static void
+penddelchan(Channel *chan, void *ip)
+{
+	SrvChan *sc, **l;
+	SrvPendChan *pc, *pending;
+
+	qlock(&pend.l);
+	for(l = &pend.chanlist; *l != nil; l = &(*l)->next)
+		if((*l)->chan == chan)
+			break;
+	sc = *l;
+	if(sc == nil){
+		qunlock(&pend.l);
+		error(Egreg);
+	}
+	*l = sc->next;
+	qunlock(&pend.l);
+	for(pending = sc->pendlist; pending != nil;){
+		pc = pending;
+		pending = pending->next;
+		if(!waserror()){
+			csend(pc->pendchan, ip);
+			poperror();
+		}
+		free(pc);
+	}
+	free(sc);
+}
+
 static int
 srvgen(Chan *c, char *name, Dirtab *tab, int ntab, int s, Dir *dp)
 {
@@ -95,6 +211,8 @@
 	dev.pathgen = 1;
 	dev.Rread = dtype(freeheap, Sys_Rread_size, rmap, sizeof(rmap));
 	dev.Rwrite = dtype(freeheap, Sys_Rwrite_size, wmap, sizeof(wmap));
+
+	pend.chanlist = nil;
 }
 
 static int
@@ -390,10 +508,14 @@
 freerdchan(Heap *h, int swept)
 {
 	SrvFile *sf;
+	Sys_Rread reply;
 
+	sf = H2D(Channel*, h)->aux;
+	reply.t0 = H;
+	reply.t1 = c2string(Eshutdown, strlen(Eshutdown));
+	penddelchan(sf->read, &reply);
 	release();
 	qlock(&dev.l);
-	sf = H2D(Channel*, h)->aux;
 	sf->read = H;
 	srvfree(sf, SRDCLOSE);
 	qunlock(&dev.l);
@@ -405,10 +527,14 @@
 freewrchan(Heap *h, int swept)
 {
 	SrvFile *sf;
+	Sys_Rwrite reply;
 
+	sf = H2D(Channel*, h)->aux;
+	reply.t0 = 0;
+	reply.t1 = c2string(Eshutdown, strlen(Eshutdown));
+	penddelchan(sf->write, &reply);
 	release();
 	qlock(&dev.l);
-	sf = H2D(Channel*, h)->aux;
 	sf->write = H;
 	srvfree(sf, SWRCLOSE);
 	qunlock(&dev.l);
@@ -529,7 +655,14 @@
 		nexterror();
 	}
 
+	pendaddpend(sp->read, rc);
+	if(waserror()){
+		penddelpend(sp->read, rc);
+		nexterror();
+	}
 	crecv(rc, r);
+	poperror();
+	penddelpend(sp->read, rc);
 	if(r->t1 != H)
 		error(string2c(r->t1));
 
@@ -615,9 +748,18 @@
 		destroy(w);
 		nexterror();
 	}
+
+	pendaddpend(sp->write, wc);
+	if(waserror()){
+		penddelpend(sp->write, wc);
+		nexterror();
+	}
 	crecv(wc, w);
+	poperror();
+	penddelpend(sp->write, wc);
 	if(w->t1 != H)
 		error(string2c(w->t1));
+
 	poperror();
 	ptrdel(h);
 	l = w->t0;
@@ -685,6 +827,8 @@
 	srvretype(io->write, f, Twrchan);
 	f->read = io->read;
 	f->write = io->write;
+	pendaddchan(f->read);
+	pendaddchan(f->write);
 
 	kstrdup(&f->name, file);
 	kstrdup(&f->user, up->env->user);
